---
import fs from "node:fs/promises";
import path from "node:path";
import { GitFork, Github, Users } from "lucide-astro";

interface GitHubStats {
    stars: number;
    forks: number;
    contributors: number;
}

const CACHE_FILE = path.join(process.cwd(), ".github-stats-cache.json");
const CACHE_DURATION = 24 * 60 * 60 * 1000;

async function readCache(): Promise<GitHubStats | null> {
    try {
        const data = await fs.readFile(CACHE_FILE, "utf-8");
        const cache = JSON.parse(data);

        if (Date.now() - cache.lastUpdated < CACHE_DURATION) {
            return cache;
        }
        return null;
    } catch (error) {
        return null;
    }
}

async function writeCache(stats: GitHubStats) {
    try {
        await fs.writeFile(
            CACHE_FILE,
            JSON.stringify({ ...stats, lastUpdated: Date.now() }),
        );
    } catch (error) {
        console.error("Failed to write cache:", error);
    }
}

async function fetchGitHubStats(): Promise<GitHubStats> {
    try {
        const cached = await readCache();

        if (cached) {
            return cached;
        }

        const [repoData, contributors] = await Promise.all([
            fetch("https://api.github.com/repos/kaneo-app/app"),
            fetch("https://api.github.com/repos/kaneo-app/app/contributors"),
        ]);

        const repo = await repoData.json();
        const contributorsList = await contributors.json();

        await writeCache({
            stars: repo.stargazers_count,
            forks: repo.forks_count,
            contributors: contributorsList.length,
        });

        return {
            stars: repo.stargazers_count,
            forks: repo.forks_count,
            contributors: contributorsList.length,
        };
    } catch (error) {
        console.error("Failed to fetch GitHub stats:", error);
        return {
            stars: 0,
            forks: 0,
            contributors: 0,
        };
    }
}

const stats = await fetchGitHubStats();

const items = [
    {
        value: stats.stars.toString(),
        label: "GitHub Stars",
        icon: Github,
    },
    {
        value: stats.forks.toString(),
        label: "GitHub Forks",
        icon: GitFork,
    },
    {
        value: stats.contributors.toString(),
        label: "Contributors",
        icon: Users,
    },
];
---

<div class="relative py-24">
    <div class="relative mx-auto max-w-7xl px-6 lg:px-8">
        <div class="mx-auto max-w-2xl lg:max-w-none text-center">
            <h2
                class="text-3xl font-bold tracking-tight sm:text-4xl text-zinc-900 dark:text-white"
            >
                Built for developers
            </h2>
            <p class="mt-4 text-lg text-indigo-600 dark:text-indigo-400">
                By developers
            </p>
            <p class="mt-2 text-zinc-600 dark:text-zinc-400 max-w-lg mx-auto">
                Join our growing open source community and help shape the future
                of project management
            </p>
        </div>

        <div class="stats-container mx-auto mt-16">
            <dl class="grid grid-cols-1 gap-y-12 gap-x-8 sm:grid-cols-3">
                {
                    items.map((item) => (
                        <div class="relative flex flex-col items-center">
                            <dt class="text-sm flex items-center gap-2 order-2 text-zinc-500 dark:text-zinc-400">
                                <item.icon className="h-4 w-4" />
                                {item.label}
                            </dt>
                            <dd class="order-1 text-5xl font-semibold tracking-tight text-zinc-900 dark:text-white mb-2">
                                {item.value}
                            </dd>
                        </div>
                    ))
                }
            </dl>
        </div>
    </div>
</div>

<script>
    import { gsap } from "gsap";

    function applyStatsAnimations() {
        const stats = document.querySelectorAll(".stats-container dd");
        const labels = document.querySelectorAll(".stats-container dt");

        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach((entry) => {
                    if (
                        entry.isIntersecting &&
                        !entry.target.hasAttribute("data-animated")
                    ) {
                        stats.forEach((stat, index) => {
                            gsap.fromTo(
                                stat,
                                {
                                    opacity: 0,
                                    y: 20,
                                    scale: 0.9,
                                },
                                {
                                    opacity: 1,
                                    y: 0,
                                    scale: 1,
                                    duration: 1,
                                    delay: index * 0.2,
                                    ease: "elastic.out(1, 0.5)",
                                },
                            );
                        });

                        labels.forEach((label, index) => {
                            gsap.fromTo(
                                label,
                                {
                                    opacity: 0,
                                    y: 10,
                                },
                                {
                                    opacity: 1,
                                    y: 0,
                                    duration: 0.8,
                                    delay: 0.2 + index * 0.2,
                                    ease: "power2.out",
                                },
                            );
                        });

                        entry.target.setAttribute("data-animated", "true");
                        observer.unobserve(entry.target);
                    }
                });
            },
            {
                threshold: 0.2,
                rootMargin: "0px 0px -10% 0px",
            },
        );

        const container = document.querySelector(".stats-container");
        if (container) {
            observer.observe(container);
        }
    }

    window.addEventListener("load", applyStatsAnimations);
</script>
